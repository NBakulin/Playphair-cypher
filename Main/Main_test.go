package main

import (
	"testing"
)

func TestCreateParentFail(t *testing.T) {
	var parent = createParent()
	var parentValues [int64(matrixSize)]int64
	for i := 0; i < int(keySize); i++ {
		for j := 0; j < int(keySize); j++ {
			parentValues[int64(parent[int64(i)][j])]++
		}
	}
	for i := 0; i < int(matrixSize); i++ {
		if parentValues[int64(i)] != 1 {
			t.Error("Expected parent will have different values!")
		}
	}
}

func TestCreateParentSuccess(t *testing.T) {
	var parent = createParent()
	var parentValues [int64(matrixSize)]int64
	for i := 0; i < int(keySize); i++ {
		for j := 0; j < int(keySize); j++ {
			parentValues[int64(parent[int64(i)][j])]++
		}
	}
	for i := 0; i < int(matrixSize); i++ {
		if parentValues[int64(i)] != 1 {
			t.Error("Expected parent will have different values!")
		}
	}
}

func TestIndividualsAreEqualFail(t *testing.T) {
	var individual Individual
	individual.key = createParent()
	var individual2 = individual
	var flagNotTrue = false
	for i := 0; i < int(keySize); i++ {
		for j := 0; j < int(keySize); j++ {
			if individual.key[int64(i)][j] != individual2.key[int64(i)][j] {
				flagNotTrue = true
			}
		}
	}
	if flagNotTrue != areKeysEqual(individual, individual2) {
		t.Error("areKeysEqual func is not working well!")
	}
}

func TestIndividualsAreEqualSuccess(t *testing.T) {
	var individual Individual
	individual.key = createParent()
	var individual2 Individual
	individual2.key = createParent()
	var flagNotTrue = false
	for i := 0; i < int(keySize); i++ {
		for j := 0; j < int(keySize); j++ {
			if individual.key[int64(i)][j] != individual2.key[int64(i)][j] {
				flagNotTrue = true
			}
		}
	}
	if flagNotTrue == areKeysEqual(individual, individual2) {
		t.Error("areKeysEqual func is not working well!")
	}
}

func TestFormatStringsFail(t *testing.T) {
	var nonFormattedString = "абвABC,:-ёЁар"
	var formattedString = formatInputString(nonFormattedString)
	var checkString = "абв,:-ёё"
	if formattedString == checkString {
		t.Error("formatInputString func is not working well!")
	}
}

func TestFormatStringsSuccess(t *testing.T) {
 var nonFormattedString = "абвABC,:-ёЁ"
 var formattedString = formatInputString(nonFormattedString)
 var checkString = "абв,:-ёё"
	if formattedString != checkString {
		t.Error("formatInputString func is not working well!")
	}
}

func TestParseBigrammsFail(t *testing.T) {
	var firstLetter = rune('с'); var secondLetter = rune('о')
	var key = map[int64][]int64{
		5: {0, 1, 2, 3, 4, 5},
		1: {6, 7, 8, 9, 10, 11},
		2: {12, 13, 14, 15, 16, 17},
		3: {18, 19, 20, 21, 22, 23},
		4: {24, 25, 26, 27, 28, 29},
		0: {30, 31, 32, 33, 34, 35} }
	firstLetter, secondLetter = parseBigramm(firstLetter, secondLetter, key)
	var firstCheckLetter = rune('л'); var secondCheckLetter = rune('ш')
	if firstLetter == firstCheckLetter || secondLetter == secondCheckLetter {
		t.Error("parseBigramm func is not working well!" + " Just got " + string(firstLetter) + " and " + string(secondLetter) + " instead of " + string(firstCheckLetter) + " and " + string(secondCheckLetter))
	}
}

func TestParseBigrammsSuccess(t *testing.T) {
	var firstLetter = rune('с'); var secondLetter = rune('о')
	var key = map[int64][]int64{
		5: {0, 1, 2, 3, 4, 5},
		1: {6, 7, 8, 9, 10, 11},
		2: {12, 13, 14, 15, 16, 17},
		3: {18, 19, 20, 21, 22, 23},
		4: {24, 25, 26, 27, 28, 29},
		0: {30, 31, 32, 33, 34, 35} }
	firstLetter, secondLetter = parseBigramm(firstLetter, secondLetter, key)
	var firstCheckLetter = rune('н'); var secondCheckLetter = rune('р')
	if firstLetter != firstCheckLetter && secondLetter != secondCheckLetter {
		t.Error("parseBigramm func is not working well!" + " Just got " + string(firstLetter) + " and " + string(secondLetter) + " instead of " + string(firstCheckLetter) + " and " + string(secondCheckLetter))
	}
}

func TestParseBigrammsBackFail(t *testing.T) {
	var firstLetter = rune('н'); var secondLetter = rune('р')
	var key = map[int64][]int64{
		5: {0, 1, 2, 3, 4, 5},
		1: {6, 7, 8, 9, 10, 11},
		2: {12, 13, 14, 15, 16, 17},
		3: {18, 19, 20, 21, 22, 23},
		4: {24, 25, 26, 27, 28, 29},
		0: {30, 31, 32, 33, 34, 35} }
	firstLetter, secondLetter = parseBigrammBack(firstLetter, secondLetter, key)
	var firstCheckLetter = rune('р'); var secondCheckLetter = rune('о')
	if firstLetter == firstCheckLetter && secondLetter == secondCheckLetter {
		t.Error("parseBigramm func is not working well!" + " Just got " + string(firstLetter) + " and " + string(secondLetter) + " instead of " + string(firstCheckLetter) + " and " + string(secondCheckLetter))
	}
}

func TestParseBigrammsBackSuccess(t *testing.T) {
	var firstLetter = rune('н'); var secondLetter = rune('р')
	var key = map[int64][]int64{
		5: {0, 1, 2, 3, 4, 5},
		1: {6, 7, 8, 9, 10, 11},
		2: {12, 13, 14, 15, 16, 17},
		3: {18, 19, 20, 21, 22, 23},
		4: {24, 25, 26, 27, 28, 29},
		0: {30, 31, 32, 33, 34, 35} }
	firstLetter, secondLetter = parseBigrammBack(firstLetter, secondLetter, key)
	var firstCheckLetter = rune('с'); var secondCheckLetter = rune('о')
	if firstLetter != firstCheckLetter || secondLetter != secondCheckLetter {
		t.Error("parseBigramm func is not working well!" + " Just got " + string(firstLetter) + " and " + string(secondLetter) + " instead of " + string(firstCheckLetter) + " and " + string(secondCheckLetter))
	}
}

func TestFindRuneIndexFail(t *testing.T) {
	var firstLetter = rune('н')
	var key = map[int64][]int64{
		5: {0, 1, 2, 3, 4, 5},
		1: {6, 7, 8, 9, 10, 11},
		2: {12, 13, 14, 15, 16, 17},
		3: {18, 19, 20, 21, 22, 23},
		4: {24, 25, 26, 27, 28, 29},
		0: {30, 31, 32, 33, 34, 35} }
	var i, j = findRuneIndex(firstLetter,  key)
	var i1 = 2; var j1 = 4
	if i == int64(i1) && j == int64(j1) {
		t.Error("parseBigramm func is not working well!" + " Just got " + string(i) + " and " + string(j) + " instead of " + string(i1) + " and " + string(j1))
	}
}

func TestFindRuneIndexSuccess(t *testing.T) {
	var firstLetter = rune('н')
	var key = map[int64][]int64{
		5: {0, 1, 2, 3, 4, 5},
		1: {6, 7, 8, 9, 10, 11},
		2: {12, 13, 14, 15, 16, 17},
		3: {18, 19, 20, 21, 22, 23},
		4: {24, 25, 26, 27, 28, 29},
		0: {30, 31, 32, 33, 34, 35} }
	var i, j = findRuneIndex(firstLetter,  key)
	var i1 = 2; var j1 = 1
	if i != int64(i1) || j != int64(j1) {
		t.Error("parseBigramm func is not working well!" + " Just got " + string(i) + " and " + string(j) + " instead of " + string(i1) + " and " + string(j1))
	}
}

func TestEncryptFail(t *testing.T) {
	var key = map[int64][]int64{
		5: {0, 1, 2, 3, 4, 5},
		1: {6, 7, 8, 9, 10, 11},
		2: {12, 13, 14, 15, 16, 17},
		3: {18, 19, 20, 21, 22, 23},
		4: {24, 25, 26, 27, 28, 29},
		0: {30, 31, 32, 33, 34, 35} }
	var output = encrypt(key)
	var checkOutput = "дипоч"
	if output == checkOutput {
		t.Error("parseBigramm func is not working well!" + " Just got " + output + " instead of " + checkOutput)
	}
}

func TestEncryptSuccess(t *testing.T) {
	var key = map[int64][]int64{
		5: {0, 1, 2, 3, 4, 5},
		1: {6, 7, 8, 9, 10, 11},
		2: {12, 13, 14, 15, 16, 17},
		3: {18, 19, 20, 21, 22, 23},
		4: {24, 25, 26, 27, 28, 29},
		0: {30, 31, 32, 33, 34, 35} }
	var output = encrypt(key)
	var checkOutput = "дипочдзугбн-ифгазупщгсдс,фипуугс:сш-ёфпсмъпргтущфажъсбгъ:чбеъгрпкебсыдеаярзвцбъджбфжьжаачсйоокдпагбачмсируаднцмчпщиётфцшбоюупщкигмгт,ощмагпиирпьрпбржобачм:нрс:чоплпьппмцшжшежпвпмсбдб:онпбхфлож-цагозрафцпнрспвз:ущаъглйиёррвмоадвюйиёррвсамц,фкжлофащйасжйфмрзйкнопврфгаумгпдмпнюшчнфмлхо,рвдсзйчмзубемеебожврвпзчгщыхмфасри-впрпсъёрпждсбрспмщуачн:рл,фкщвпйэийпщгафаглрцшхгпрсни:сбсш-спап:ч-увюрпждсблйущумемсбайкотяъзблгжхьпртщбспщцймдойомс:вргбрпфмоаачдсрсзо:чачеобеэппмчаропвпвсдяуюупотежыаагьтгозвсмгс:оопинпспжбожрпйэозяибдисупфубрагпщблгмгтййибцзоийосфдсопгщзчёонвцнщ-мбоюрпгъфдачэазпемчасоёуднкфв:рп,фзслохшнахбмднжзязо:чйэщмфич:спигсифлчдпхокеачм,фмчрибмсфъ-ждлрс:гьифмчбгз:знемнвпирпмчгсо,ъгсисфлйнчсасдусгычасбпхримдзпасцзмчгсйоспчззцзугбсмлйоа:эдспнвпеб,вгчежгффупсдпас:уйкисдгдсфп,фигнис:сдцлофопмчбмф,йжчншюисвп-ицнте,фжбзоагэавпгогтгтируз:осгъжсчзубеэ:сош-мевр,иуюущаъйфн:рпнввлнмфмспмбнтилпвпрспчзждяобепмцмф,ютжфпрсиаггыс:гбегэприпмфм:зщбдсезбспщжп:ч-угоспчзлдгщисчанофофжфпдед:фмжбсдцлпивписолмчпррвгъгбжемпвбждюи:счаисвпсбидмебрйлмюбрпфгбумчзопкбн-ожнпспнугп,фкбфцяо:чсгаюмо:зсгсцюшзцяиджцнйжёомфпнрпацзучзрпгрнцбх:ощучзмгкэхьрпгрмфозлйифбщфжгдпс:утяяигммфагщт-жпорлтямрзофяисдиф,рлзочзеоаеисоесввнкэъмач:спн:сзцяёсбжбсанкюжбщ,жийнпкп:этщзцмчежсгсдблмюцшгвсп-рпоъ-ейфцниб,ждёнрвиргбожрпчнфжжеаъжобрпвсиьщютяогтрвхнмфзучзн:гщисойцшяоф,мебрйлжбфмспойс:впиоиррщ-ибюч:с:лбрзпии,эпирфлзсгмсипвйквасдбйемйэаюггмчсдцэч:вавп,фокрлокррсиниэд,иеобеозлропгбпмшюоп,ожлпоюумфмбибцзмчпсмиирегзочзтщютоирпгасочзн:ч:сдднзугпмбдпцбозлйриф,бммб:ндсавспоаэприбюзчжджджбцэадпмаежеёопрбгрпекфтжо:ч-увюгенцдгмргыущжйафасбсйоспчзждвайэоюмднзъзнас:рлпнгапцф,пилйущзсежцзхнф,рвщ-юфпспржй,фмбеаиелоагъжкгсъфмвпмбсй:эгтжджбфлзгюайэиддсезжмэджыдсмчоижбзцшюжжкффорпрлджежтюъжмчпипьрэжтзоф,бгрпегрвфяпорпёрсдзмасхнсвтгжэбдпняонвюайэждсбмо:зтз,вгчбггффупс:орспмйжфбмчсдуспилаубзоэёбмфярлюмоичацжвюдеачфуфбем-зф,пмцмф,опаио,ач-зф,зчлйц:фмущеббгмфжбфмрпс:савпзцсдрщ-ипьхшлхдсгскфгли,квжфагйзчнмголвн,фиждлпьфмвпэ:сдойчдпхспмчпсопвпзцсдузмраэйжн:и,гаиежджйцжцзпо,зюфйфпмуфзрфб,фзрпсцзн,цшёмс:фжёонигбслфпнззо-зф,зчлйф:гъкгк,ждмб:цемярдютемоютзофузцважщгмлйёоквмюидмбмгьжфяфпнззогъэазсджпькэфреотюцмо,бюрэгоокбллавп:омъ:смрпсмиирдипвпо:садждёноксбчсбтйэвб:нъдч:еаяшлвчнъёмрсполисообчдбебаэъ-зчлйуссфагюшырчнждклцббвьйпоёнпмшю,оцшафгсисбсач-впспвпифмгбокъясбрсйимбтфгъсбйиокждящеачасбйилбнпца:сетфмюцнфдбгьгбёасипмгбъюребачмюнсбявцбфмнуджпнгпрслвизйкюопсшбднжфэгбхгщчзщгириёмдкб,оущзеюайэйрсиф,чдгбрпножъък-зф,зчлйфе-цхблонхдбооппийсочзн:рпмчпспоютёонвс:бр:сяиюагсшюслгбэаезбдпсрвлвмфлдкэгбпепмрпвксбмечзисаю-ртнщйдмбжпрсдеажйннъгирмящм:миркэирс:цюфможущисущярфяхшрпфжэадоасбсжоопвпрсмъисрпрпрзбамчщцчаязгепнбччаязтфзйупйлпвпоачрслвизйксгсдебйсф,рвфпнззоцзпоъ-с:оз,фрп,оущ:нд-,олаоз:ттзпинцлйи,эпринибекобювписбфмбгъуюущфмжыаазфмчежф,сисфбжбеозбспвоирпэажлирмящмвсун,фрзпмуфзрчзирхгфмнррвдсагзуопнтмбмчйжфяеоцпгмущи:рптф,бнвзйхшкигмгттфимкжмъбекоцзеттзпвсф:сф,длежаджембадпфмдоёмгкэхьтн:сфовасдзмппоенврвйжзоюшдсхшае:чпщмфрс:чопвплас:жбцбйжиоиррщезбдрвдмопрсйоежлрбсхнрврсхбз,асфнхмчнфжи:сбтгпхпмфмжфпмаежеоогпювцммълйпфсипоачфмдедмемч:екюжёвф,псйжфпнззояибвмфжй,фмблйгьгбзуджпозугтсирвбгщтёмпрпозцемютифбщмгеоаеисдифятзбчмр:спрсдеажйцшрпфмнт-иджгщжежбуюущшюэ:сдмррвтщ:эмбёнрврсхбвюждр-ппцжбжчн,фвнбрпсемнхэбмбмпаезо,яшб:нцмасбспщдсасозрлмъагжд:ффмвпмчырокгчежйиебс:ждйиешфмцабсэреажезсасежгпрснвадлбсор,фм,фвкчмзщчаязё,иреицзлфтфврлдмчщргмфооюебвкнждссбтдущёопиеатшагзцсдуз-иджгбмчгсдслфбг:слфюшъксбнуюжрп:ршюспнтмфгълйдорвбсбчвряупо:сф,ирчзщгежн:афасопчафпнззоёфмф,знуеж:ффмчзщгждадпоагквмбин,орпжобск,мфэ:мчбфсбжбгщисфа:эежвпмчъ-сгодгпгъфпб-йиирмящмйлджнпзмф,м:даснбмрлтяао:ччачспнежоио,шчхнокэжпмщ-нвгбчэемфмеорпожмби:еждлмербмдозолнп,оэчщсфжыхпс-иджбоф,пспмоллпирнсеммчн-жйрэоеютоилозчцфнвгбмовлсажйюуджбцтюи:туф,ъгуфцьж,рлбжджютзфсйэйо,мъжйаидмирмбфмсйбсущ-жфцмярслвизйкмо:звбэжьйзв:спврицннё,:зцсрёззцсрглсасктщждмгмгцфифяуюмо,нпбхфлзхейф,юшгпэ:сдоёрсйлпьхшкпаелйна:с:чшп,фисмпожкярп-рнцфмвпи,сицэадпмлжбевюйэч:яшадсивбповаейппей-б:сирноюшфзяфйэеуо,пмнъцно,оеачисёдсищяэгейбжлйюфюзирез:ччааълвйиейщярийфрсф,ежф,ейбжозф-рплжпойжн:олеааъжомбжедиавбвютфпнзклвлмопфблврсп,фзйгачаявбвсфлйчсбгбвпвфяредсмюооппфаачйжбантфпнзклвюгъзйебчакэопи,прспаюяшадз:ущбоюттзеютусъфм-в:чждцшяиет:сф,длюшгхокгажйждир:чознотзопнвфпкабслвмпваокчарпгаэ:н-цш-ипсмфиррсйлбжежфпнззоёоокейемо,впмч,бвпсокфцзмчсихбпмцшёфс:вбзблопм,оозопиёгоокнччмфаййлаубзогаксбжвп,фспрпвпеаифмпчстзо,тдчгвппвспнобюявцбфмйиждноюу:чбммб,ёоззм,,э:ж:мчшцнцбррв,одбжерэлагбисонаес:оофичншюис-иджрсжопсбспщзгьймбс:злгспмс:тззобгмчежёопнсийжн:мбнвмджббигмэйбспщугтнюмпщцчгашюфй:оцмёуущеопмшюсдрщириёчамопигос:тецусимчф,лйчйавпщдлспьжоирспвф,псйжлчмголвнжбчйав:рсиъ--зф,зчлйтугсдсд-бггжрпфмжлчбнмоптгйфниёзждфмспсйо,прокузжймпмчсигмф,зощзрэегйзбсж,днф,глфпнззовютщжйдифцмяейбгемдлсдшюцдмдклпнгмдмфжоирперс:рпгбхшкйб,йэигегйзбсз,фёрсло:слрфмзчиорлпмгмпмнпцмагмбебгъвргбиоюинтн-рэ:онвкобюрпеджежбожсаьжф,юшэгрлже-роимчежфлшюцшадрвритнбсхшжбриопоюаф:свчпопщыхсп,фебфёоелошюиеачдсяоемойсбисаювкёоокб,жбоописбврщн-рпнйрежлобеоззцёопмютпиждвбмкзодлпмнврипрспбхжйгбжерэлффмюцрис:гбжемпспждгачанкежютъгежглфгпмфюрпбржоежмбрцэйфиоппоемопгбмевкжерэмбмрзочншюсц:члййинпкабсопиёиреоасщяблфтемумпилж:уоирпвабрф,:сгмпмфмспмбптзъпщпажеилпнмбершюозчдзпйиирс:чажйодбмэгчйпрщ-нвжеир,окнаеждгоспоеачирмпозмрбеежлосисбусэгзчфли,мргыо,ежрп:качсбнтолозклисфсзраввюжфпвеб,обрагъжлп,зинзрвжйбзвврмб:и:чжбозожебкэозпхдсагежрлспфпумшпгацм-зпнмбвпокинмувсдначежо,сиущяштянюдйпмцшокнчрзюшджхшжбеамкежн:допмфмгарпвнс:нузофтфмиммчежщрэг,фч:ршегбетдфжнёфжхшн:усйлф,рслвтгжйцмквузмбжбаржфзодвэйрсаемчбгжф:сйлсифпин,офгмчсдтежйч:рцачдмд-тнюжэбрплагбйещяютлоглтенчмбмпмпваоопмисзмбюнвмчбмф,ждрсрфбсцжсис:жцо,йидтййрпмдипущэ:хшсобетдцшо,пмасд-:чюугыеоавсиэщачниюцнифмгбокэбмч,фрпмпао:чумпинвмдвнцжбласжйжбзцжеьрр,жбзйфмуспитемчш-бэвсмчежлоыц,фмчгхпфс:внжбвпфмдиютущзмэй-аофц:э:рщирйчнигхпмэйежйибюдизоемпсрицмкобвсфйфюврсложежйгбмчсидррвагюуъкйиёррврсйофцйэфгдлждркфмрпярф,пнфяхгчжо,фоврйефирпмнмфсдиекнетлйебгъврбф:оисбоппчдозгб,ёмбтупмрпмпвасу:сф,длшюжцъёврспвпжхф,дмзъ:ошюисгщцш:ос:мецдсф:цбсыцпсмъмвмбнхфжисеоиррабгопмдвншюаэдрцнлоеанпвзжйжбфкквагюуэкачебгъвргоспуюущксцзщнгмгмкопмириёлодлсдшюцдяфис,оггйбз:врноджлофжебгъвргбуфрлзч:мзоагфуюшфзспдиоичзщгущсч-змдаэждожмф,очсгыбхдзмдмейвпсврмчъдфъисчагщкеюшр,фми,йзфя-зпсдлфуавюнсирвпигщи:нубащэнл:сбсш-йвзчрхпии,мфо,шхмд,окебгьгф,врмееко,прмфзучззрйицнцзбг-втнбюлеждёвжежбмчгпхшмбтупобсбемв,фуцс:внжбвпфмдик,фмаегбсбрспмнпцм:сч:рцачдмырпнситежйждркфммсбжчнпвмбсчпм,фаднвсиблсбооппбцчжф,юшпвсикфбмлфадпоблмбтебщятйэдзхбпмчарсййнмфаюшъёфмгбокъярпаеаээрадрвузладиет:чфабчрпзспнсфбсопвпмдклпнгмсп,фвкцшмрисщмтяиржждлфж,ожбфкёмпмс:бряявксджцо,цзмдклпнетжфежнуджпншюидмфёосвеащэхшгдсднюэ:омлйлп:сэрф,ачмфгьтгцштзрпчсавцбаэъ-ч:лхемсбирдебтрпсоемфмрсрфбсумтяиржждлфж,ожбфкжшют:чцшждскйлф,бюдмчакэяопньгсизмэпниебцширйчниьёвйдбмуьйджфмкэирпсдбознщасбджфирисоофярсжъс:савлидютгмрибаизгжзобвбжвсмчпсмиопвпщбасс:оз-зчзет:чфаемниебгбклсифпибч:вабр-уир:рдсаеузьрлвфпнзлпфабтчаязвржзпщгщцшдисифплбрпфмнтлампкббежфвлнвнвэбмчеибспщлпасъфрбмбеоёмисшб-дирйчниопвпрпч:гбафэп:убеагюуэрмфцмквтдфмпарвцбглмчбфжхютпмфмспзмпмдсаеузждозяро,дпас:уасмгмц:углждйицмгчирннщулофмеодлсдшюцд:угллййосдераеюш:сэр:сэрф,ачгтпсмълвсдязшю-имдмоэгмгмцйибмъгрсмъисоюоипрюуырмиагбгбхвбож-внвбгйжлчф,ч:ожгъчаждяшжоофчм-агмпмс:ерфаз,ожрпузумпрсижфлф:члйтюисдпютмфпщюопвфужоачырсптюфйеозчтеаачсо,ниоззрфужбцмцбсбоз,ёблмюигмдипсщфёчас:ъфоопиоезнлвэбсбфю,футфмсйпфрввюбэ:лч:рцачдмщ-э:клжфютрцемопнуютбсдч-облиргбфюгарэйихбис,ио,ч:пмцмэгч:рцачдмырнвдмбвбмйжрпжбржхнпсух:сёнеждьютййи,кв,ётурвбгьгф,еошюач:озй,фмчш-рлбжеж,свнкаоибэагмфтус,алаесбборипоопмбспусшпэжло,ф-роирпацзужфютсдязчмглтенлгжвкзрюаасщнбгпсбхлвизгж:нждзт:ффмгщчаязмфрсбгйжзодмйлф,рлйфисаюб-цудж,ффювпозггдсцгпмшюрсрфбсцжсис:жцо,йидтййрпрсрфбсуфзвцбасмдрчбсо,юшшц,ф-мбвмфчнниебвкпайвбмцюирйчнийи,фч:нобетдфжч:кэмпгафмдиджф,пм:сэрирфпнзлпфабспщклмдмопрфуйжф,рлйкиочзщгущсч:нютпнхнпомд,оаъасчн:нмдбобсж,хштур,фмноадф,псйжмбчэачпмфмспзмпмфжрлчзджпншчриджмбвррпозтюцшмрсполкебгьгф,бгмфжди-ч:рцачдмыррисп,очакэмчгаоонфйэяучзн::вмчдрчзджи,гхсиозаъйкжбебозгспфс:внжбвпфмдиютюв:чцшхнпсопсбгърпзс,яъзлпф,фмпьржчзджпнеаис:ноп:лмчпмаешртямчюшш-асфзрцьщждбгмфмрдсгънмисзмааждздшхъёрсжодсоп:оознрпмуфойкебгьгф,рпбцтюз:гщасщуф,свжбебоз:ефмкбпсф,поачюфф,дмзъюфджсбвпвкчм:щшюжрмиопрпвродюшъдн:ираеф,дслвзрюажосаспрсз,фжюнетфмрлюмачфмдеемдсаеузиромждлачю,ффммбжджд,ёмпгачмжд,бжемчшццбдюм:ебнтзйирржнцфжчжбсзомбнчфлсчдсэднунффлхшгбцшмбмчспбсз,рц:чцшзумчгбювхшвп,фокщэафпслфопблбебмлвшчфиднюшюоежэцжъ:чфапнежэцжъ:чфарвбгьгф,рпвбдпф,:смчежзо-идж,обрппъжен,ёрпюц,фасфягмокэ:тшфумчежзосдцэадсфжфежмбироудсбсфкжодмлрлофм,ишчйф-иджйфущи,мфлбсакэпщоапрспмпнпозебждлйфёэ:мцущяиас:сщрйлф,:ффмжйбдмдсойлф,,фцю,фууджтуми:чрспмк,ждрсбгбцчефмкп:эш-хнмдге:срсзо:чрсбгбцебгъвраибеопаюокйежежбожч:рцачдмъ-гъзйебчакэопчзщгбюрэ:онпцм:сасфбжйфр,фчшфмждрцемзцжефлгбоззу:сщкзяэйрвпрчнждцшёориютэпфм:ззоюшсфлдкнбсз,пвмдозэ:оззуфяквежэщаебгмфюечасгцдчасгцд-цхбсвеаисчасгцдпшжоааоанинпзмпмцшрпгамчкоаэжф:сщрсвмбмчхнс:озбсджчзет:чфафичспнжфэдвпмпрсмфо,с:озв:жйидквкоф,юшэдвпждллжеммждллжеммёопо:зрпэ:нтласбкэнзебцшафпслфопжбебозгспфс:ящрпэ:нтсбкэнзмпеоасадриопах:мдлсдшюцдмнгтущсчжйтдчзщгзцёопмдсэдну:сшюраежэщ:чжджбоп:ффммдрлчзето,бауааеузьрр,ч:сдбр-уждюнеммеиобцшб,бирйчнисбшюлжлфжфгжьлюшьгюшщп:еждипижнвйжн:ч:рцачдмъ-квюмадсипмщуадрвспбпчзюшэхфмрсаежедбаэшдарзолоцмюшо,ущжтдсфяек-зюмврвпзцжеждвакнбжвнмдшчф,мдипсбёвеафмкэирэ:хшсобетдцшрсрфбсфмдисис:жцо,йидтййёвеач:сдбр-зрпждфмкэирмпвзмдачн:квфждисифпнуешфмра:сасмиопаопнбсчмгасофуыдсиф,фбмфшюлйгсокблмюжшявблнубмйксамчпщцфчсф,йкч:рцачдмэреамкежн:зфлафжэарсрвсимюсл-цф,мчджжоо,никнбсз,ожхшнплащэмбистюцшрлсидрпфсфаээшфмжджцав:чжджбцшебтзящ-дмррисвсбчсзвщпвсгурвжовжоесвдоасбсмбгщжешюждюндсвюрцгжирнрн-нпрсйлбжежгщмбсющулффмзйцшзцжеждйор,мю:кхз:ршюгегбчэачютйжкфз,и,:чшдррдмюшидюажочнзчдбтюрпждпшфмкэиртемчлфоп:фдсблмбсмцбёопмфмч:-днплпшюцшдлдмбасширопожэ:рлйлчзджбтрцъгюш:сёус:вбшюлцфмлаёор,фасвнтявюшмдэ:мч,фяваеопшюлодсаеузйрспфждоемзцжефлгбоззнджчзджбг:чфжюцфоупджчзджбмбепмдлсдшюцдсдилнъ:сзрчзжбржпнрпмцчвз::офцпмжджбслчавахбрвопрп:р,фасфзмчсииргъгбцшео-зсвчсф,ф,миб-яонидмгжпомфгатеачаяспмдклпнвюёндсмпмбкэопрпцмцблошцют-ицбютшхавёнпмэйбаоюрсф,рвжфщрюачззож,ювсбйинвсдчаоотяфмвнжгнов:йи,ооз-влозцфжспгбцшмчнвписбирдебтсаузрпожнпшчпврв:свюо,мчежрцф,эропгббхмчпрокчйщпчзджэбждрабгьгф,вюоппоби:зч:яздоцзййрлбжежю,ящбцрсф,рвжфэкзож,мгмцййювчаваюфф,дмзъ-ощябмщугмн-ожи-рпкцбвсфасчяфан,жйоз,нъжвнусбюёосижфлф:члйсбрсбгйжщрбюиъджуюмфгатеяжем,фжюшчпрр,мдвнэ:нтмчдмфиждлибжгасбжч:свчпоч:рцачдмэрфгюшйжцмщязцдипнмбуфмбтесчфпвкцшн:мбспв-квбгьгф,рпэажлжб,фпдфцсптюачпомбрсбгтяопзлфхджцатнежпои,гырв,зкнгжиртюрпфлшю,мнёцшео-м:эшддпдмозжднобчлажй,нъжвб:мщрачявмдфжьжвюйи,оозэ:сджу,фжшдсойнпмчъддсшхъймдмрчнфжжлчзджбаэбвп,фокжй,фрцтзирса-е:сщргпмгсдрщювжбзцжеждожчйавпщгч,фмчъпбррв:снфэбсжюуъ-бенцвп:чирсоасадридждоаежф:сёнсфасщуагаеаэшремнчпшчсбсопрсрвсимю:нрпо-нвмдшбсч,нрзч:рцачдм-жджеоадебяовжвнс:бчвавкчакэпщаеф,рвгхокфпвкжйрпчсачюти,мдклпнв:погдпс:угти,сиущ:нъ-фгюшежсгодсврпмгаъаан:рп-ццзфбнимдлаозбсбенвгхпфжебрриспбоглпоэаи:эжгсбюрпжбсанкъжсжтзют:орпхшжд:нърмндсилзвэхэдвпрпсашюмбвбжбсописйнъбейзежир:ффмирсуйжлоирспювфмгщюуавёнокмюи:еозчыхспвп,фоккебгьгф,квпмбежй,фмнсии-,об--иджрпеоцм:эбгаю:нюзбсъзмбрспфрвжфожнпсбвпнчйэдзпи"
	if output != checkOutput {
		t.Error("parseBigramm func is not working well!" + " Just got " + output + " instead of " + checkOutput)
	}
}

func TestDecryptFail(t *testing.T) {
	var key = map[int64][]int64{
		5: {0, 1, 2, 3, 4, 5},
		1: {6, 7, 8, 9, 10, 11},
		2: {12, 13, 14, 15, 16, 17},
		3: {18, 19, 20, 21, 22, 23},
		4: {24, 25, 26, 27, 28, 29},
		0: {30, 31, 32, 33, 34, 35} }
	var output = decrypt(key)
	var checkOutput = "вкамиотви"
	if output == checkOutput {
		t.Error("parseBigramm func is not working well!" + " Just got " + output + " instead of " + checkOutput)
	}
}

func TestDecryptSuccess(t *testing.T) {
	var key = map[int64][]int64{
		5: {0, 1, 2, 3, 4, 5},
		1: {6, 7, 8, 9, 10, 11},
		2: {12, 13, 14, 15, 16, 17},
		3: {18, 19, 20, 21, 22, 23},
		4: {24, 25, 26, 27, 28, 29},
		0: {30, 31, 32, 33, 34, 35} }
	var output = decrypt(key)
	var checkOutput = "вконцеянваря,овеянныепервойоттепелью,хорошопахнутвишневыесадывполденьгде-нибудьвзатишкееслипригреваетсолнцегрустный,чутьвнятныйзапахвишневойкорыподнимаетсяспреснойсыростьюталогоснега,смогучимидревнимдухомпроглянувшейиз-подснега,из-подмертвойлиствыземлитонкиймногоцветныйароматустойчиводержитсянадсадамидоголубыхпотемок,допоры,поканепросунетсясквозьголызиныветвейкрытыйпрозеленьюрогмесяца,поканекинутнаснегжирующиезайцыопушенныхкрапинследовапотомветерпринесетвсадысостепногогребнятончайшеедыханиеопаленнойморозамиполыни,заглохнутдневныезапахиизвуки,ипочернобылу,побурьянам,повыцветшейнастерняхбрице,поволнистымбуграмзябинеслышно,серойволчицейпридетсвостоканочь,какследы,оставляязасобойпостепивыволочкисумеречныхтенейпокрайнемукстепипроулкуянварскимвечеромгодавъехалвхуторгремячийлогверховойвозлеречкионостановилусталого,курчавозаиневшеговпахахконя,спешилсянадчерньюсадов,тянувшихсяпообеимсторонамузкогопроулка,надостровамитополевыхлевадвысокостоялущербленныймесяцвпроулкебылотемноитихогде-тозаречкойголосистоподвываласобака,желтелогонеквсадникжаднохватнулноздрямиморозныйвоздух,неспешаснялперчатку,закурил,потомподтянулподпругу,сунулпальцыподпотники,ощутивгорячую,запотевшуюконскуюспину,ловковскинулвседлосвоебольшоетеломелкую,незамерзающуюизимойречушкусталпереезжатьвбродконь,глухозвякаяподковамипоустилавшимдноголышам,находупотянулсябылопить,новсадникзаторопилего,иконь,каяселезенкой,выскочилнапологийберегзаслышаввстречьсебеговорискрипполозьев,всадниксноваостановилконятотназвуксторожкодвинулушами,повернулсясеребряныйнагрудникиокованнаясеребромвысокаялукаказачьегоседла,попавподлучимесяца,вдругвспыхнуливтеменипроулкабелым,разящимблескомверховойкинулналукуповодья,торопливонаделвисевшийдоэтогонаплечахказачийбашлыкверблюжьейшерсти,закуталлицоипоскакалмашистойрысьюминовавподводу,онпо-прежнемупоехалшагом,нобашлыканеснялужвъехаввхутор,спросилувстречнойженщины:ану,скажи,тетка,гдетутувасяковостровновживетяковлукич-тонудаавотзатополемегокурень,крытыйчерепицей,видитевижуспасибовозлекрытогочерепицейпросторногокуреняспешился,ввелвкалиткуконяи,тихостукнуввокнорукоятьюплети,позвал:хозяиняковлукич,выйди-кана-час-на-часнаминуткубезшапки,пиджаквнапашку,хозяинвышелнакрыльцовсматриваясьвприезжего,сошелспорожковкогонелегкаяпринеслаулыбаясьвседеющиеусы,спросилоннеугадаешь,лукичночеватьпускайкудабыконяпоставитьвтеплоенет,дорогойтоварищ,непризначувынеизрикабудетенеизземотделачто-тоугадываюголосваш,сдаетсямне,будтознакомыйприезжий,морщабритыегубыулыбкой,раздвинулбашлыкполовцевапомнишьияковлукичвдругиспуганноозирнулсяпосторонам,побледнел,зашептал:вашеблагородиеоткельвасгосподинесауллошадкумызаразопределиммывконюшнюскольколет-томинулону-ну,тыпотишевременимногопрошлопопонкаестьутебявдомеутебячужихникогонетприезжийпередалповодхозяинуконь,ленивоповинуясьдвижениючужойруки,высокозадираяголовунавытянутойшееиусталоволочазадниеноги,пошелкконюшнеонзвонкостукнулкопытомподеревянномунастилу,всхрапнул,почуявобжитыйзапахчужойлошадирукачужогочеловекалегланаегохрап,пальцыумелоибережноосвободилинатертыедесныотпресногожелезаудил,иконьблагодарноприпалксенуподпругияемуотпустил,нехайпостоитоседланный,атрошкиохолонеттогдарасседлаю,говорилхозяин,заботливонакидываянаконянахолодавшуюпопонкуасам,ощупавседловку,ужеуспелопределитьпотому,какбылазатянутачересподушечнаяподпруга,какдоотказусвободнораспущенасоединяющаястременныеремнискошевка,чтогостьприехализдалекаизаэтотденьсделалнемалыйпробегзерно-товодитсяутебя,яковлукиччудокестьнапоим,дадимзернецану,пойдемтевкуреня,каквастеперичавеличатьинезнаюпо-старомуотвыкивроденеудобнонеловкоулыбалсявтемнотехозяин,хотяизнал,чтоулыбкаегоневидназовипоимени-отчествунезабылотвечалгость,первыйвыходяизконюшникакможновсюгерманскуювместесломали,ивэтупришлосьяобвасчастовспоминал,александранисимовичсэнтихпор,каквновороссийскомрасстрялисьсвами,ислухуобваснеимелиятакдумал,чтовывтурциюсказакамиуплыливошливжарконатопленнуюкухнюприезжийснялбашлыкибелогокурпяя-курпяйкурпеймерлушкапапаху,обнаживмогучийугловатыйчереп,прикрытыйредкимбелесымволосомиз-подкрутого,волчьегосклада,лысеющеголбаонбеглоогляделкомнатуи,улыбчивосощуривсветло-голубыеглазки,тяжкоблестевшиеизглубокихпроваловглазниц,поклонилсясидевшимналавкебабамхозяйкеиснохездоровоживете,бабочкиславабогу,сдержанноответилаемухозяйка,выжидательно,вопрошающеглянувнамужа:чтоэто,дескать,зачеловекатыпривеликакоеснимнужнообхождениесоберитеповечерять,короткоприказалхозяин,пригласивгостявгорницукстолугость,хлебаящисосвининой,вприсутствииженщинвелразговоропогоде,осослуживцахегоогромная,будтоизкамнятесанная,нижняячелюстьтруднодвигаласьжевалонмедленно,устало,какприморенныйбыкналежкепослеужинавстал,помолилсянаобразавзапыленныхбумажныхцветахи,стряхнувсостаренькой,теснойвплечахтолстовкихлебныекрошки,проговорил:спасибозахлеб-соль,яковлукичтеперьдавайпотолкуемснохаихозяйкаторопливопринялисостолаповинуясьдвижениюбровейхозяина,ушливкухнюглавасекретарьрайкомапартии,подслеповатыйивялыйвдвижениях,приселкстолу,искосапосмотревнадавыдова,и,жмурясь,собираяподглазамимешковатыескладки,сталчитатьегодокументызаокном,втелефонныхпроводах,свисталветер,наспинелошади,привязаннойнедоуздкомкпалисаднику,посамойкабаржинекособокопрогуливаласьичто-токлеваласорокаветерзаламывалейхвост,поднималнакрыло,ноонасновасадиласьнаспинустарческиизможденной,ковсемубезучастнойклячи,победновелапосторонамхищнымглазкомнадстаницейнизколетелирваныехлопьяоблаковизредкавпросветкосониспадалисолнечныелучи,вспыхивалпо-летнемусинийклочокнеба,итогдавидневшийсяизокнаизгибдона,лесзанимидальнийперевалскрохотнымветрякомнагоризонтеобреталиволнующуюмягкостьрисункатактызадержалсявростовепоболезнинучтожостальныевосемьдвадцатипятитысячниковприехалитридняназадмитингбылпредставителиколхозовихвстречалисекретарьдумающепожевалгубамисейчасунасособенносложнаяобстановкапроцентколлективизациипорайонучетырнадцатьивосемьдесятыхвсебольшетоз-тозтовариществопосовместнойобработкеземлизакулацко-зажиточнойчастьюещеосталисьхвостыпохлебозаготовкамнужнылюдиоч-ченьколхозыпосылализаявкинасороктрирабочих,априслаливастолькодевятьииз-подприпухлыхвеккак-топо-новому,пытливоидолго,посмотрелвзрачкидавыдову,словнооценивая,начтоспособенчеловектакты,дорогойтоварищ,сталобыть,слесарьоч-ченьхорошоанапутиловскомдавноработаешькурисдемобилизациидевятьлетдавыдовпротянулрукузапапироской,исекретарь,уловиввзглядомнакистидавыдоватусклуюсиневутатуировки,улыбнулсякраешкамиотви"
	if output != checkOutput {
		t.Error("parseBigramm func is not working well!" + " Just got " + output + " instead of " + checkOutput)
	}
}

func TestGetKeyFail(t *testing.T) {
	var individual Individual
	var key = createParent()
	individual.key = key
	var output = getKey(individual)
	for i := 0; i < int(keySize); i++ {
		for j := 0; j < int(keySize); j++ {
			if output[int64(i)][j] == 1000 {
				t.Error("getKey func is not working well!")
			}
		}
	}
}

func TestGetKeySuccess(t *testing.T) {
	var individual Individual
	var key = createParent()
	individual.key = key
	var output = getKey(individual)
	for i := 0; i < int(keySize); i++ {
		for j := 0; j < int(keySize); j++ {
			if output[int64(i)][j] != key[int64(i)][j] {
				t.Error("getKey func is not working well!")
			}
		}
	}
}

func TestCreateEmptyBigrammArrayFail(t *testing.T) {
	var bigrammArray = createEmptyBigrammArray();
	bigrammArray[0][2] = 1
	var flag = false
	for i := 0; i < int(matrixSize); i++ {
		for j := 0; j < int(matrixSize); j++ {
			if bigrammArray[int64(i)][j] != 0 {
				flag = true
			}
		}
	}
	if !flag {
			t.Error("createEmptyBigrammArray func is not working well!")
	}
}

func TestCreateEmptyBigrammArraySuccess(t *testing.T) {
	var bigrammArray = createEmptyBigrammArray();
		for i := 0; i < int(matrixSize); i++ {
		for j := 0; j < int(matrixSize); j++ {
			if bigrammArray[int64(i)][j] != 0 {
				t.Error("createEmptyBigrammArray func is not working well!")
			}
		}
	}
}

func TestFindFirstFail(t *testing.T) {
	var key = map[int64][]int64{
		5: {0, 1, 2, 3, 4, 5},
		1: {6, 7, 8, 9, 10, 11},
		2: {12, 13, 14, 15, 16, 17},
		3: {18, 19, 20, 21, 22, 23},
		4: {24, 25, 26, 27, 28, 29},
		0: {30, 31, 32, 33, 34, 35}}
	var firstI int64;
	var firstJ int64
	firstI, firstJ = findFirst(key, 5)
	if firstI != 5 || firstJ != 5 {
		t.Error("findFirst func is not working well!")
	}
}

func TestFindFirstSuccess(t *testing.T) {
	var key = map[int64][]int64{
		5: {0, 1, 2, 3, 4, 5},
		1: {6, 7, 8, 9, 10, 11},
		2: {12, 13, 14, 15, 16, 17},
		3: {18, 19, 20, 21, 22, 23},
		4: {24, 25, 26, 27, 28, 29},
		0: {30, 31, 32, 33, 34, 35}}
	var firstI int64;
	var firstJ int64
	firstI, firstJ = findFirst(key, 15)
	if firstI == 2 && firstJ == 0 {
		t.Error("findFirst func is not working well!")
	}
}